import { useState, useCallback } from 'react';
import { toast } from 'sonner';

export interface GenerationOptions {
  size: '1280x720' | '720x1280' | '720x720' | '1792x1024' | '1024x1792';
  seconds: '4' | '8' | '12';
  model: 'sora-2' | 'sora-2-pro';
}

export interface VideoState {
  id: string | null;
  status: 'idle' | 'queued' | 'in_progress' | 'completed' | 'failed';
  progress: number;
  videoUrl: string | null;
  prompt: string;
  options: GenerationOptions;
}

const POLLING_INTERVAL = 10000; // 10Áßí

export function useVideoGeneration() {
  const [apiKey, setApiKey] = useState<string | null>(() => {
    return localStorage.getItem('openai_api_key');
  });

  const [video, setVideo] = useState<VideoState>({
    id: null,
    status: 'idle',
    progress: 0,
    videoUrl: null,
    prompt: '',
    options: {
      size: '1280x720',
      seconds: '4',
      model: 'sora-2',
    },
  });

  const saveApiKey = useCallback((key: string) => {
    localStorage.setItem('openai_api_key', key);
    setApiKey(key);
    toast.success('API„Ç≠„Éº„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü');
  }, []);

  const generateVideo = useCallback(
    async (prompt: string, options: GenerationOptions) => {
      if (!apiKey) {
        toast.error('API„Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
        return;
      }

      try {
        setVideo({
          id: null,
          status: 'queued',
          progress: 0,
          videoUrl: null,
          prompt,
          options,
        });

        // ÂãïÁîªÁîüÊàê„É™„ÇØ„Ç®„Çπ„Éà
        const response = await fetch('https://api.openai.com/v1/videos', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${apiKey}`,
          },
          body: JSON.stringify({
            model: options.model,
            prompt: prompt,
            size: options.size,
            seconds: options.seconds,
          }),
        });

        if (!response.ok) {
          const error = await response.json();
          const errorMessage = error.error?.message || 'ÂãïÁîªÁîüÊàê„É™„ÇØ„Ç®„Çπ„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';
          const errorCode = error.error?.code || error.error?.type || 'unknown';
          
          // „Ç®„É©„Éº„Çø„Ç§„Éó„Å´Âøú„Åò„ÅüË©≥Á¥∞„É°„ÉÉ„Çª„Éº„Ç∏
          let detailedMessage = errorMessage;
          if (errorCode === 'billing_hard_limit_reached') {
            detailedMessage = '‚ùå OpenAI„ÅÆË™≤ÈáëÂà∂Èôê„Å´ÈÅî„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ\n\nOpenAI„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÅßË™≤ÈáëË®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\nhttps://platform.openai.com/settings/organization/billing';
          } else if (response.status === 403 && errorMessage.includes('organization must be verified')) {
            detailedMessage = '‚ùå OpenAIÁµÑÁπî„ÅÆË™çË®º„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ\n\n‰ª•‰∏ã„ÅÆURL„Åã„ÇâÁµÑÁπîË™çË®º„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ:\nhttps://platform.openai.com/settings/organization/general\n\nË™çË®ºÂæå„ÄÅÂèçÊò†„Åæ„ÅßÊúÄÂ§ß15ÂàÜ„Åã„Åã„ÇãÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ';
          } else if (response.status === 401) {
            detailedMessage = '‚ùå API„Ç≠„Éº„ÅåÁÑ°Âäπ„Åß„Åô„ÄÇ\n\nË®≠ÂÆöÁîªÈù¢„Åã„ÇâÊ≠£„Åó„ÅÑAPI„Ç≠„Éº„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
          } else if (response.status === 429) {
            detailedMessage = '‚ùå „É¨„Éº„ÉàÂà∂Èôê„Å´ÈÅî„Åó„Åæ„Åó„Åü„ÄÇ\n\n„Åó„Å∞„Çâ„ÅèÂæÖ„Å£„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ';
          }
          
          throw new Error(detailedMessage);
        }

        const data = await response.json();
        const videoId = data.id;
        
        // ÁîüÊàêÈñãÂßã„É¨„Çπ„Éù„É≥„Çπ„Çí„É≠„Ç∞Âá∫Âäõ
        console.log('üé¨ ÂãïÁîªÁîüÊàêÈñãÂßã - „É¨„Çπ„Éù„É≥„Çπ:', JSON.stringify(data, null, 2));

        setVideo((prev) => ({
          ...prev,
          id: videoId,
          status: 'queued',
        }));

        toast.success('ÂãïÁîªÁîüÊàê„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü');

        // „Éù„Éº„É™„É≥„Ç∞ÈñãÂßã
        pollVideoStatus(videoId);
      } catch (error) {
        console.error('ÂãïÁîªÁîüÊàê„Ç®„É©„Éº:', error);
        const errorMessage = error instanceof Error ? error.message : 'ÂãïÁîªÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';
        
        // Ë§áÊï∞Ë°å„ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
        toast.error(errorMessage, {
          duration: 10000, // 10ÁßíÈñìË°®Á§∫
          style: {
            whiteSpace: 'pre-line',
            maxWidth: '500px',
          },
        });
        
        setVideo((prev) => ({
          ...prev,
          status: 'failed',
        }));
      }
    },
    [apiKey]
  );

  const pollVideoStatus = useCallback(
    async (videoId: string) => {
      const poll = async () => {
        try {
          const response = await fetch(`https://api.openai.com/v1/videos/${videoId}`, {
            headers: {
              Authorization: `Bearer ${apiKey}`,
            },
          });

          if (!response.ok) {
            throw new Error('„Çπ„ÉÜ„Éº„Çø„ÇπÁ¢∫Ë™ç„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
          }

          const data = await response.json();
          
          // API„É¨„Çπ„Éù„É≥„Çπ„ÅÆË©≥Á¥∞„Çí„É≠„Ç∞Âá∫Âäõ
          console.log('üìπ ÂãïÁîª„Çπ„ÉÜ„Éº„Çø„Çπ„É¨„Çπ„Éù„É≥„Çπ:', JSON.stringify(data, null, 2));

          setVideo((prev) => ({
            ...prev,
            status: data.status,
            progress: data.progress || 0,
          }));

          if (data.status === 'completed') {
            console.log('‚úÖ ÂãïÁîªÁîüÊàêÂÆå‰∫Ü - ÂãïÁîªURL„ÇíÂèñÂæó„Åó„Åæ„Åô');
            
            try {
              // OpenAI Sora API „Åß„ÅØ /content „Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÅßÂãïÁîª„ÇíÂèñÂæó
              const contentResponse = await fetch(`https://api.openai.com/v1/videos/${videoId}/content`, {
                headers: {
                  Authorization: `Bearer ${apiKey}`,
                },
              });

              if (!contentResponse.ok) {
                throw new Error(`ÂãïÁîª„Ç≥„É≥„ÉÜ„É≥„ÉÑÂèñÂæóÂ§±Êïó: ${contentResponse.status}`);
              }

              // Blob„Å®„Åó„Å¶ÂãïÁîª„Éá„Éº„Çø„ÇíÂèñÂæó
              const blob = await contentResponse.blob();
              const videoUrl = URL.createObjectURL(blob);
              
              console.log('‚úÖ ÂãïÁîªURLÁîüÊàêÊàêÂäü:', videoUrl.substring(0, 50) + '...');
              
              setVideo((prev) => ({
                ...prev,
                videoUrl: videoUrl,
              }));
              toast.success('ÂãïÁîªÁîüÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ');
            } catch (error) {
              console.error('‚ùå ÂãïÁîª„Ç≥„É≥„ÉÜ„É≥„ÉÑÂèñÂæó„Ç®„É©„Éº:', error);
              toast.error('ÂãïÁîª„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + (error instanceof Error ? error.message : '‰∏çÊòé„Å™„Ç®„É©„Éº'), {
                duration: 10000,
              });
              setVideo((prev) => ({
                ...prev,
                status: 'failed',
              }));
            }
          } else if (data.status === 'failed') {
            console.error('‚ùå ÂãïÁîªÁîüÊàêÂ§±Êïó:', data.error || '„Ç®„É©„ÉºË©≥Á¥∞„Å™„Åó');
            const errorMsg = data.error?.message || 'ÂãïÁîªÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';
            toast.error(`ÂãïÁîªÁîüÊàêÂ§±Êïó: ${errorMsg}`, {
              duration: 10000,
            });
          } else if (data.status === 'queued' || data.status === 'in_progress') {
            console.log(`‚è≥ „Éù„Éº„É™„É≥„Ç∞Á∂ôÁ∂ö - „Çπ„ÉÜ„Éº„Çø„Çπ: ${data.status}, ÈÄ≤Êçó: ${data.progress}%`);
            // Á∂ôÁ∂ö„Åó„Å¶„Éù„Éº„É™„É≥„Ç∞
            setTimeout(poll, POLLING_INTERVAL);
          }
        } catch (error) {
          console.error('„Çπ„ÉÜ„Éº„Çø„ÇπÁ¢∫Ë™ç„Ç®„É©„Éº:', error);
          toast.error('„Çπ„ÉÜ„Éº„Çø„ÇπÁ¢∫Ë™ç„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
          setVideo((prev) => ({
            ...prev,
            status: 'failed',
          }));
        }
      };

      poll();
    },
    [apiKey]
  );

  const downloadVideo = useCallback(async () => {
    if (!video.videoUrl) {
      toast.error('„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åô„ÇãÂãïÁîª„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
      return;
    }

    try {
      // ObjectURL„Åã„ÇâÁõ¥Êé•„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
      const a = document.createElement('a');
      a.href = video.videoUrl;
      a.download = `sora-video-${Date.now()}.mp4`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      toast.success('ÂãïÁîª„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Åæ„Åó„Åü');
    } catch (error) {
      console.error('„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Ç®„É©„Éº:', error);
      toast.error('„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  }, [video.videoUrl]);

  const resetVideo = useCallback(() => {
    // Êó¢Â≠ò„ÅÆObjectURL„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    if (video.videoUrl && video.videoUrl.startsWith('blob:')) {
      URL.revokeObjectURL(video.videoUrl);
    }
    
    setVideo({
      id: null,
      status: 'idle',
      progress: 0,
      videoUrl: null,
      prompt: '',
      options: {
        size: '1280x720',
        seconds: '4',
        model: 'sora-2',
      },
    });
  }, [video.videoUrl]);

  return {
    apiKey,
    video,
    saveApiKey,
    generateVideo,
    downloadVideo,
    resetVideo,
  };
}
